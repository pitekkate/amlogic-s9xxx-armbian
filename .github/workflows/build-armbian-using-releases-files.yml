name: Build Armbian using releases files

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: docker://ghcr.io/edgd1er/armbian-builder:latest
      options: --privileged -v /dev:/dev -v /proc:/proc -v /sys:/sys

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Run armbian_build
        id: build
        run: |
          armbian_buildpath="build/output/images"
          [[ -d "${armbian_buildpath}" ]] || mkdir -p "${armbian_buildpath}"
          ln -sf /builder/build ${GITHUB_WORKSPACE}/build
          ln -sf /builder/build /home/runner/work/_actions/pitekkate/amlogic-s9xxx-armbian/main/build
          
          # Perbaikan 1: Gunakan filter jq yang lebih akurat
          echo "Fetching latest Armbian release..."
          latest_asset=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases?per_page=5" | \
            jq -r '
              [.[].assets[] | 
              select(.name | contains("Armbian_jammy_") and 
                     contains("-trunk_") and 
                     endswith(".img.gz"))] |
              sort_by(.updated_at) | 
              reverse | 
              .[0]
            ')
          
          # Perbaikan 2: Tambahkan validasi hasil
          if [[ -z "${latest_asset}" || "${latest_asset}" == "null" ]]; then
            echo "ERROR: No valid Armbian release found!"
            echo "Trying fallback URL..."
            # Perbaikan 3: Fallback ke URL manual jika API gagal
            fallback_url="https://github.com/${{ github.repository }}/releases/download/Armbian_jammy_current/Armbian_jammy_rockchip-trunk_rockpi-s_latest.img.gz"
            armbian_filename="Armbian_jammy_rockchip-trunk_rockpi-s_latest.img.gz"
            curl -fL "${fallback_url}" -o "${armbian_buildpath}/${armbian_filename}" || exit 1
          else
            latest_url=$(echo "${latest_asset}" | jq -r '.browser_download_url')
            armbian_filename="${latest_url##*/}"
            echo "Downloading: ${latest_url}"
            curl -fL "${latest_url}" -o "${armbian_buildpath}/${armbian_filename}"
          fi
          
          # Perbaikan 4: Tambahkan debugging
          echo "File downloaded: $(ls -lh "${armbian_buildpath}")"
          
          cd "${armbian_buildpath}" && gzip -df *.img.gz && sync
          
          echo "build_tag=Armbian_jammy_save_$(date +"%Y.%m")" >> ${GITHUB_OUTPUT}
          echo "status=success" >> ${GITHUB_OUTPUT}
        env:
          TZ: America/New_York

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: Armbian image
          path: build/output/images/*.img

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        if: ${{ success() }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.build.outputs.build_tag }}
          release_name: ${{ steps.build.outputs.build_tag }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload_release_asset
        uses: actions/upload-release-asset@v1
        if: ${{ success() }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/output/images/*.img
          asset_name: Armbian_jammy_save_$(date +"%Y.%m").img
          asset_content_type: application/octet-stream
